##############################################################################
# Copyright 2020 u-blox AG, Thalwil, Switzerland
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#############################################################################


###############################################################################
#
# u-blox Android GNSS Driver configuration file
#
###############################################################################


### Serial interface
# Device to be used by the driver
#SERIAL_DEVICE                   /dev/ttyACM0 # USB (Default interface)
#SERIAL_DEVICE                   /dev/i2c-0   # I2C on HiKey620 board
SERIAL_DEVICE                   /dev/ttyHS1   # UART on msm8953 board
#SERIAL_DEVICE                   /dev/i2c-1   # I2C on Sabre SD (IMX6Q)

# Device to be used by the sensor driver
#SENSOR_DEVICE                   /dev/i2c-0

# If set to a value bigger 0, the TX-Ready feature will be used if the
# specified SERIAL_DEVICE file is a I2C interface. This feature
# requires an unused receiver PIO being connected to a host GPIO that
# can be used as an interrupt-generating GPIO by the Linux Kernel.
# The further configuration options for this feature are defined
# below.
I2C_TX_READY_ENABLED            0

# The number of the PIO on the receiver which will be used as the
# TX-Ready output, if data is available on the I2C interface.
# Please refer to the chapter "Peripheral Input Output (PIO)" in the
# Hardware integration guide of your product for more information
# on the PIO mapping.
I2C_TX_READY_RECV_PIO           13

# The GPIO of the host processor which is connected to the TX-Ready output
# of the receiver. The GPIO configured below must be exported to the sysfs,
# be configured as an input and must be able to generate interrupts. Please
# refer to the file Documentation/gpio/sysfs.txt of the Linux Kernel used
# in your Android version for more information.
I2C_TX_READY_HOST_GPIO          143

# The baud rate that should be used to communicate with the receiver and at
# which the receiver will output the NMEA messages.
BAUDRATE                        115200

# The default baud rate the receiver is configured to after start-up. The
# HAL interface will configure itself to this baud rate and send a command
# to the receiver to switch to the baud rate assigned to the BAUDRATE keyword
BAUDRATE_DEF                    9600

# The generation of the receiver attached to the host device. The default
# is 7. (E.g. when using a MAX-7Q, the value for this field should be
# set to '7'. For a LEO-M8N the value should be set to '8')
# This will, beside other, define if AssistNow Legacy or AssistNow MGA is
# used (if enabled).
RECEIVER_GENERATION             8


# LOG replay configurations. Set the REPLAY_LOGGING_ENABLED flag to true in Android.mk to use logging
# Ensure that a value ubx logfile is on the device before using
# The buffer size and buffer delay need to be changed together to ensure correct replay speed in driver
#LOG_REPLAY_FILE_NAME              /data/logger/gps/replay.ubx
#LOG_REPLAY_BUFFER_SIZE            8192  # Default buffer size is 8192(8k)
#LOG_REPLAY_DELAY_MS               500  # Default delay is 500 ms (change based on buffer size)

### Assistance

# Timeout for stopping the receiver [in seconds]
STOP_TIMEOUT                    10

# Which AssistNow strategies to use (Legacy and MGA)
# 0 - None <- default value
# 1 - AssistNow Autonomous only
# 2 - AssistNow Offline only
# 3 - AssistNow Online only
# 4 - AssistNow Autonomous and AssistNow Online
# 5 - AssistNow Offline and AssistNow Online
AGNSS_STRATEGY                  4

# Please refer to the configuration file gps.conf to
# configure AssistNow Offline (MGA or Legacy)

# AssistNow Offline data download (via Xtra) interval [In minutes]
AGNSS_OFFLINE_INTERVAL          720

# AssistNow Online data download interval [in minutes]
AGNSS_ONLINE_INTERVAL           120

# AssistNow Online and Offline Configuration (Legacy and MGA)
AGNSS_ONLINE_SERVER1            online-live1.services.u-blox.com
AGNSS_ONLINE_SERVER2            online-live2.services.u-blox.com
#AGNSS_TOKEN                     <placeholder_token>

# Save aiding data to file system when engine stops
# 0 - Don't save aiding data on the filesystem
# 1 - Save aiding data on the filesystem <- default value
AGNSS_PERSISTENCE               1

# File path and name for aiding information
AGNSS_PERSISTENCE_FILE          /data/vendor/persistence.agnss

# The time source for aiding the receiver
# It is important to aid the receiver with precise time information. The
# local system can be assumed to be accurate to 10 seconds, if it is going
# to be updated by an RTC, takes leap seconds into account and the user will
# not be able to change the system time to a wrong value. If this is the case,
# it is best to use the system time for aiding.
# If the system time will, however, be lost after startup or the system time
# is not trustworthy for an other reason, it is possible to make the driver
# calculate the time itself based on NTP injects, the time received from
# the online service when downloading data or the receiver when it has a fix. This
# will however only work if there has been such a time injection since the last
# startup. Otherwise the receiver will not be aided until such an update
# occurred. Use the following time for aiding
# 0 - System time <- default value
# 1 - Driver time
AGNSS_TIME_SOURCE               0


### Sensors

# When Sensors interface is enabled, set the update frequency
#SENSOR_UPDATE_FREQ_HZ           1

# Roll, pitch and yaw of the vehicle body frame, in radians
# Vehicle body frame is defined as:
# - X Axis-Positive points forward through the nose of the vehicle
# - Y Axis-Positive points to the right of the X-axis, perpendicular to the X-axis
# - Z Axis-Positive points down through the bottom of the vehicle, perpendicular to the X-Y plan
#SENSOR_ALIGNMENT_ROLL           0.0
#SENSOR_ALIGNMENT_PITCH          0.0
#SENSOR_ALIGNMENT_YAW            0.0

# When Sensors interface is enabled, set the receiver VRP-to-Antenna lever arm
# offset, in centimeters
#LEVER_ARM_VRP_ANTENNA_X 0
#LEVER_ARM_VRP_ANTENNA_Y 0
#LEVER_ARM_VRP_ANTENNA_Z 0

# When Sensors interface is enabled, set the receiver VRP-to-IMU lever arm
# offset, in centimeters
# Note: this offset is used as the Sensor Placement provided to the Android
# framework, and should be set.
LEVER_ARM_VRP_IMU_X 0
LEVER_ARM_VRP_IMU_Y 0
LEVER_ARM_VRP_IMU_Z 0

# When Sensors interface is enabled, set the receiver IMU-to-Antenna lever arm
# offset, in centimeters
#LEVER_ARM_IMU_ANTENNA_X 0
#LEVER_ARM_IMU_ANTENNA_Y 0
#LEVER_ARM_IMU_ANTENNA_Z 0

# When Sensors interface is enabled, set the receiver IMU-to-VRP lever arm
# offset, in centimeters
#LEVER_ARM_IMU_VRP_X 0
#LEVER_ARM_IMU_VRP_Y 0
#LEVER_ARM_IMU_VRP_Z 0

# When Sensors interface is enabled, set the receiver IMU-to-CRP lever arm
# offset, in centimeters
#LEVER_ARM_IMU_CRP_X 0
#LEVER_ARM_IMU_CRP_Y 0
#LEVER_ARM_IMU_CRP_Z 0

###############################################################################
